addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
# Read in postcode shapefile
post_codes <- readOGR(dsn="/Users/hughsturrock/Downloads/Distribution",layer="Districts")
?post_codes
head(post_codes)
head(prices)
dim(prices)
# Create monthly data per district
dist_year_mean <- aggregate(prices$Price, by=list(year = prices$year, postcode = prices$post_code_start), FUN = mean)
dist_year_mean_price <- reshape(dist_year_mean, v.names = "x", idvar = "postcode",
timevar = "year", direction = "wide")
head(dist_year_mean_price)
# Create dataframe with % change
#perc_change <- cbind(dist_year_mean_price$postcode, dist_year_mean_price[,3:25]/
#                       dist_year_mean_price[,2:24])
perc_change <- NULL
ncol <- dim(dist_year_mean_price)[2]
for(i in 1:nrow(dist_year_mean_price)){
perc_change <- rbind(perc_change, dist_year_mean_price[i,3:ncol] / dist_year_mean_price[i,2:(ncol-1)])
}
perc_change <- cbind(dist_year_mean_price$postcode, perc_change)
names(perc_change)[1] <- "name"
head(perc_change)
head(dist_year_mean_price)
# Get centroids
centroids <- gCentroid(post_codes, byid = TRUE)
centroids_pc <- data.frame(name = post_codes$name, lng=coordinates(centroids)[,1],
lat = coordinates(centroids)[,2])
## Try ML approach using 2 previous periods
num_reps <- dim(perc_change)[2]
num_reps
perc_change <- merge(perc_change, centroids_pc, by="name")
ml_data <- data.frame(name = rep(perc_change$name,num_reps-3),
lng = rep(perc_change$lng, num_reps-3),
lat = rep(perc_change$lat, num_reps-3),
change = as.vector(unlist(perc_change[,4:num_reps])),
previous_1 = as.vector(unlist(perc_change[,3:(num_reps-1)])),
previous_2 = as.vector(unlist(perc_change[,2:(num_reps-2)])))
head(ml_data)
ml_data <- ml_data[complete.cases(ml_data),]
rf_mod <- randomForest(change ~ lng + lat + previous_1 + previous_2, data = ml_data)
plot(rf_mod$predicted, ml_data$change)
abline(0,1)
plot(rf_mod$predicted, ml_data$change,pch=16, col=rgb(0.5,0,0,0.5))
plot(rf_mod$predicted, ml_data$change,pch=16, col=rgb(0.5,0,0,0.1))
abline(0,1)
dim(ml_data)
gam_mod_no_time <- gam(change ~ s(lng, lat, k=-1, bs="gp") + s(previous_1, previous_2, k=-1), data = ml_data)
plot(predict(gam_mod_no_time), ml_data$change)
plot(predict(gam_mod_no_time), ml_data$change, col=rgb(0.5,0,0,0.1))
abline(0,1)
h2o.init()
train <- as.h2o(ml_data)
auto_ml_mod <- h2o.automl(x = c("lng", "lat", "previous_1", "previous_2"),
y = "change",
training_frame = train,
max_runtime_secs = 120,
nfolds=5)
test<- predict(auto_ml_mod, train)
plot(as.vector(test), ml_data$change)
plot(as.vector(test), ml_data$change, col=rgb(0.5,0,0,0.1))
abline(0,1)
plot(as.vector(test), ml_data$change, col=rgb(0.5,0,0,0.1),xlim=c(0,2),ylim=c(0,2))
abline(0,1)
plot(predict(gam_mod_no_time), ml_data$change, col=rgb(0.5,0,0,0.1),xlim=c(0,2),ylim=c(0,2))
abline(0,1)
plot(rf_mod$predicted, ml_data$change,pch=16, col=rgb(0.5,0,0,0.1),xlim=c(0,2),ylim=c(0,2))
abline(0,1)
# Make forecast with h2o model
forecast_ml_data <- data.frame(name = perc_change$name,
lng = perc_change$lng,
lat = perc_change$lat,
previous_1 = perc_change[,num_reps],
previous_2 = perc_change[,num_reps-1])
forecast_ml <- data.frame(name = perc_change$name,
forecast_h2o_auto = as.vector(predict(auto_ml_mod, as.h2o(forecast_ml_data))),
forecast_rf = predict(rf_mod, forecast_ml_data),
forecast_gam_mod_no_time = predict(gam_mod_no_time, forecast_ml_data))
#  SAVE data
save(perc_change, file="/Users/hughsturrock/Documents/Work/House Price Analysis/perc_change.RData")
save(forecast_ml, file = "/Users/hughsturrock/Documents/Work/House Price Analysis/forecast_ml.RData")
post_codes <- readOGR(dsn="/Users/hughsturrock/Documents/Work/House Price Analysis/Distribution",layer="Districts")
post_codes <- merge(post_codes, perc_change, by="name")
post_codes <- merge(post_codes, forecast_ml, by="name")
# MAP
forecast_labels <- sprintf(
"<strong>%s</strong><br/>Forecast percent change %g",
post_codes$name, round((post_codes$forecast_gam_mod_no_time-1)*100,1)
) %>% lapply(htmltools::HTML)
labels_2015 <- sprintf(
"<strong>%s</strong><br/>Forecast percent change %g",
post_codes$name, round((post_codes$x.2017-1)*100,1)
) %>% lapply(htmltools::HTML)
# define palette
col_pal <- colorBin(rev(colorRampPalette(ochre_palettes[["olsen_seq"]])(10)),
bins = c(0.98, seq(1,1.5, 0.1)),
na.color = NA)
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_gam_mod_no_time), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
which(perc_change$name="PE27")
which(perc_change$name=="PE27")
forecast_ml_data <- data.frame(name = perc_change$name[1462],
lng = perc_change$lng[1462],
lat = perc_change$lat[1462],
previous_1 = perc_change[1462,num_reps],
previous_2 = perc_change[1462,num_reps-1])
forecast_ml_data
which(perc_change$name=="PE28")
forecast_ml_data <- data.frame(name = perc_change$name[1463],
lng = perc_change$lng[1463],
lat = perc_change$lat[1463],
previous_1 = perc_change[1463,num_reps],
previous_2 = perc_change[1463,num_reps-1])
forecast_ml_data
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$foreecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
hist(post_codes$foreecast_h2o_auto)
post_codes$foreecast_h2o_auto
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
forecast_labels <- sprintf(
"<strong>%s</strong><br/>Forecast percent change %g",
post_codes$name, round((post_codes$forecast_gam_mod_no_time-1)*100,1)
) %>% lapply(htmltools::HTML)
labels_2015 <- sprintf(
"<strong>%s</strong><br/>Actual percent change %g",
post_codes$name, round((post_codes$x.2017-1)*100,1)
) %>% lapply(htmltools::HTML)
# define palette
col_pal <- colorBin(rev(colorRampPalette(ochre_palettes[["olsen_seq"]])(10)),
bins = c(0.98, seq(1,2, 0.1)),
na.color = NA)
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
summary(post_codes$x.2017)
-0.5*100
# define palette
col_pal <- colorBin(rev(colorRampPalette(ochre_palettes[["olsen_seq"]])(10)),
bins = seq(-0.5, 2, 0.2),
na.color = NA)
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
seq(-0.5, 2, 0.2)
col_pal <- colorBin(rev(colorRampPalette(ochre_palettes[["olsen_seq"]])(10)),
bins = seq(-0.5, 1.5, 0.2),
na.color = NA)
leaflet() %>% addTiles() %>% addPolygons(data = post_codes, color = col_pal(post_codes$forecast_h2o_auto), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = forecast_labels, group = "forecast 2017-2019") %>%
addPolygons(data = post_codes, color = col_pal(post_codes$x.2017), fillOpacity = 0.9,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
bringToFront = TRUE,
fillOpacity = 0.7),
label = labels_2015, group = "2015-2017") %>%
addLayersControl(overlayGroups = c("forecast 2017-2019", "2015-2017"),
options = layersControlOptions(collapsed = FALSE))
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
# Load demo data
load("UV_USA_airports.RData") # object called input
getwd()
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
?box-orient
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
?column
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
?strong
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction')
runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-tz-bldg-ui')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/demo-rate-density')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
## Map malaria vector data
read.csv("/Users/hughsturrock/Downloads/Anopheline_data.csv")
## Map malaria vector data
vec_data <- read.csv("/Users/hughsturrock/Downloads/Anopheline_data.csv")
library(leaflet)
leafet() %>% addTiles() %>%
addCircleMarkers(vec_data$longitude, vec_data$latitude)
leaflet() %>% addTiles() %>%
addCircleMarkers(vec_data$longitude, vec_data$latitude)
leaflet() %>% addTiles() %>%
addCircleMarkers(vec_data$longitude, vec_data$latitude, radius=1, weight=1)
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
request
length(request)
response <- httr::content(request, as='text')
response
length(response)
request[1]
request[1]
request[2]
request[3]
request[4]
request[5]
request[6]
request[7]
request[8]
request[9]
request[3]
request[1]
request[2]
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
runApp('Documents/Work/MEI/DiSARM/GitRepos/NTD_wireframe')
# Load relevant libraries
library(spatstat)
library(raster)
library(sp)
library(lgcp)
library(geoR)
library(gtools)
library(lme4)
library(leaflet)
library(sparr)
library(oro.nifti)
setwd("/Users/hughsturrock/Documents/Work/MEI/DiSARM/GitRepos/spatial-epi-course/course_materials/week3/Lab_files")
CaseControl<-read.csv("CaseControl.csv")
Cases<-CaseControl[CaseControl$case==1,]
Controls<-CaseControl[CaseControl$case==0,]
# And boundary file
NAM_Adm0<-raster::getData('GADM',country='NAM',level=0)
# Convert to a SPDF
CaseControl_SPDF <- SpatialPointsDataFrame(coords = CaseControl[,c("long", "lat")],
data = CaseControl[,c("household_id", "case")])
# Let's plot and see what we have
case_color_scheme <- colorNumeric(c("blue", "red"), CaseControl_SPDF$case)
leaflet() %>% addTiles() %>% addCircleMarkers(data=CaseControl_SPDF, color = case_color_scheme(CaseControl_SPDF$case))
leaflet() %>% addTiles() %>% addCircleMarkers(data=CaseControl_SPDF,
color = case_color_scheme(CaseControl_SPDF$case),
radius = 2)
# To generate a kernel density estimate, we first
# need to generate point pattern object of points
# First need to define a window
Nam_Owin <- owin(xrange=range(CaseControl$long),yrange=range(CaseControl$lat))
# Now define a ppp of the case data
Cases_ppp <- ppp(Cases$long, Cases$lat, window = Nam_Owin)
plot(Cases_ppp)
Cases_ppp
?ppp
# Plot kernel density estimate
plot(density(Cases_ppp)) # Units are intensity of points per unit square
# Try with different bandwidths
plot(density(Cases_ppp,0.02, n=2500,give.Rkern=TRUE))
plot(density(Cases_ppp,0.08))
plot(density(Cases_ppp,bw.diggle)) # automatic bandwidth selection based on cross-validation
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp,bw.diggle), crs = crs(NAM_Adm0))
density_raster[density_raster<1000]<-NA
leaflet() %>% addTiles() %>% addRasterImage(density_raster, opacity=0.6)
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp,bw.diggle), crs = crs(NAM_Adm0))
#density_raster[density_raster<1000]<-NA
leaflet() %>% addTiles() %>% addRasterImage(density_raster, opacity=0.6)
?density
density_raster
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp,bw.diggle), crs = crs(NAM_Adm0), n=128)
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp,bw.diggle, n=128), crs = crs(NAM_Adm0))
leaflet() %>% addTiles() %>% addRasterImage(density_raster, opacity=0.6)
density_raster
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp,bw.diggle, n=64), crs = crs(NAM_Adm0))
leaflet() %>% addTiles() %>% addRasterImage(density_raster, opacity=0.6)
density_raster
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(stats::density(Cases_ppp,bw.diggle, n=64), crs = crs(NAM_Adm0))
leaflet() %>% addTiles() %>% addRasterImage(density_raster, opacity=0.6)
density(CaseControl_SPDF@coords)
density(CaseControl_SPDF@coords, bw.diggle)
# Plot kernel density estimate
plot(density(Cases_ppp)) # Units are intensity of points per unit square
density(Cases_ppp,bw.diggle)
plot(density(Cases_ppp,bw.diggle))
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp), crs = crs(NAM_Adm0))
leaflet() %>% addTiles() %>% addRasterImage(density_raster, opacity=0.6)
?density
density_raster
test<-density(Cases_ppp)
test$xstep
test$ystep
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp, n=64), crs = crs(NAM_Adm0))
density_raster
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp, bw.ppl), crs = crs(NAM_Adm0))
leaflet() %>% addTiles() %>% addRasterImage(density_raster, opacity=0.6)
density(Cases_ppp, bw.ppl)
test<-density(Cases_ppp, bw.ppl)
test2<-density(Cases_ppp)
test$v
test2$v
plot(density(Cases_ppp, bw.ppl))
plot(density(Cases_ppp))
?density.ppp
test<-density(Cases_ppp, bw.ppl)
# Try with different bandwidths
plot(density(Cases_ppp,0.02)
# Try with different bandwidths
plot(density(Cases_ppp,0.02))
# Try with different bandwidths
plot(density(Cases_ppp,0.02))
plot(density(Cases_ppp,0.08))
plot(density(Cases_ppp,bw.ppl)) # automatic bandwidth selection based on cross-validation
plot(density(Cases_ppp,0.2))
plot(density(Cases_ppp,0.1))
# Try with different bandwidths
plot(density(Cases_ppp,0.02))
plot(density(Cases_ppp,0.1))
plot(density(Cases_ppp,bw.ppl)) # automatic bandwidth selection based on cross-validation
# Map on leaflet (needs to be a rasterLayer object)
density_raster <- raster(density(Cases_ppp, bw.ppl), crs = crs(NAM_Adm0))
leaflet() %>% addTiles() %>% addRasterImage(density_raster, opacity=0.6)
# First we have to code cases and controls as "case" and "control" rather
# than 1 or 0
CaseControl$case_or_control <- ifelse(CaseControl$case==1,"case", "control")
CaseControl_ppp <- ppp(CaseControl$long, CaseControl$lat,
window = Nam_Owin,
marks=as.factor(CaseControl$case_or_control))
risk_est <- risk(CaseControl_ppp,tolerate=TRUE) # adapt=TRUE uses adaptive smoothing
library(sparr)
install.packages("sparr")
library(sparr)
risk_est <- risk(CaseControl_ppp,tolerate=TRUE) # adapt=TRUE uses adaptive smoothing
# (i.e. different smount of smoothing dependent on where you are)
plot(risk_est)
plot(risk(CaseControl_ppp)
)
plot(risk_est)
# to plot on a web map, first specify the projection
risk_raster <- raster(risk_est$rr, crs = crs(NAM_Adm0))
# Then plot using the leaflet package
pal = colorNumeric(palette=tim.colors(64), domain=exp(risk_raster[]+0.2), na.color = NA)
leaflet() %>% addTiles("http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png") %>%
addRasterImage(exp(risk_raster), opacity=0.6, col = pal)
range(exp(risk_raster))
# Then plot using the leaflet package
pal = colorNumeric(palette=tim.colors(64), domain=exp(risk_raster[]), na.color = NA)
leaflet() %>% addTiles("http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png") %>%
addRasterImage(exp(risk_raster), opacity=0.6, col = pal)
# Then plot using the leaflet package
pal = colorNumeric(palette=tim.colors(64), domain=exp(values(risk_raster)), na.color = NA)
leaflet() %>% addTiles("http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png") %>%
addRasterImage(exp(risk_raster), opacity=0.6, col = pal)
plot(risk_est)
risk_est
leaflet() %>% addTiles("http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png") %>%
addRasterImage(exp(risk_raster), opacity=0.6, col = pal)
summary(exp(risk_raster))
?risk
# to plot on a web map, first specify the projection
log_risk_raster <- raster(risk_est$rr, crs = crs(NAM_Adm0))
log_risk_est <- risk(CaseControl_ppp,tolerate=TRUE)
# By default, the risk function returns log risk for
# symmetry's sake. If you want to return relative risk
risk_est <- risk(CaseControl_ppp, tolerate=TRUE, log=FALSE)
plot(risk_est)
200/300
rbinom(100, 100, 0.67)
rbinom(100, 1, 0.67)
rbinom(100, 1, 0.67)
rbinom(100, 1, 0.67)
rbinom(100, 1, 0.11)
mean(rbinom(100, 1, 0.11))
mean(rbinom(100, 1, 0.11))
mean(rbinom(100, 1, 0.11))
mean(rbinom(1000, 1, 0.11))
?relrisk
?relrisk.ppp
test <- relrisk(CaseControl_ppp)
plot(test)
plot(epx())
plot(exp(log_risk_est))
exp(log_risk_est)
risk_est <- risk(CaseControl_ppp,tolerate=TRUE, log=FALSE)
plot(risk_est)
plot(test)
CaseControl_ppp <- ppp(CaseControl$long, CaseControl$lat,
window = Nam_Owin,
marks=as.factor(CaseControl$case))
test <- relrisk(CaseControl_ppp)
plot(test)
plot(risk_est)
plot(test)
plot(risk_est)
plot(test)
plot(risk_est)
risk_est <-  relrisk(CaseControl_ppp)
plot(risk_est)
# to plot on a web map, first specify the projection
log_risk_raster <- raster(risk_est$rr, crs = crs(NAM_Adm0))
# to plot on a web map, first specify the projection
log_risk_raster <- raster(risk_est, crs = crs(NAM_Adm0))
risk_raster <- raster(risk_est$rr, crs = crs(NAM_Adm0))
# Then plot using the leaflet package
pal = colorNumeric(palette=tim.colors(64), domain=exp(values(risk_raster)), na.color = NA)
leaflet() %>% addTiles("http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png") %>%
addRasterImage(exp(risk_raster), opacity=0.6, col = pal)
